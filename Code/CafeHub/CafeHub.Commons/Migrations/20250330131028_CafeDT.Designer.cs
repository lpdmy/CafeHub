// <auto-generated />
using System;
using CafeHub.Commons;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeHub.Commons.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250330131028_CafeDT")]
    partial class CafeDT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeHub.Commons.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7553),
                            Description = "All coffee-based drinks",
                            ImagePath = "/images/menu-image-1.jpg",
                            IsActive = true,
                            Name = "Our original coffee",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7554)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7556),
                            Description = "A variety of tea options",
                            ImagePath = "/images/menu-image-2.jpg",
                            IsActive = true,
                            Name = "Our tea & bread",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7557)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7558),
                            Description = "Delicious bakery items",
                            ImagePath = "/images/menu-image-3.jpg",
                            IsActive = true,
                            Name = "Our pastries & cravings",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7559)
                        });
                });

            modelBuilder.Entity("CafeHub.Commons.Models.CustomerDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateGranted")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountId");

                    b.ToTable("CustomerDiscounts");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("DiscountValue")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IceAmount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SugarAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7863),
                            Description = "Freshly Brewed Coffee Blended with Rich, Velvety Steamed Milk for a Perfectly Balanced Cup.",
                            ImagePath = "/images/original-coffee-img-1.png",
                            IsAvailable = true,
                            Name = "White Chocolate",
                            Price = 26.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7864)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7870),
                            Description = "Smooth Condensed Milk Combined with Chilled Ice Cubes and Bold, Flavorful Espresso for a Refreshing Treat.",
                            ImagePath = "/images/original-coffee-img-2.png",
                            IsAvailable = true,
                            Name = "Colombia Dark Roast",
                            Price = 20.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7870)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7872),
                            Description = "Rich Espresso Blended with Smooth Vanilla-Flavored Syrup and Creamy Milk, Creating a Perfectly Balanced Delight.",
                            ImagePath = "/images/original-coffee-img-3.png",
                            IsAvailable = true,
                            Name = "Iced Caramel Latte",
                            Price = 24.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7873)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7875),
                            Description = "Freshly Brewed Coffee Combined with Bold Espresso, Delivering a Perfectly Balanced and Rich Flavor Experience.",
                            ImagePath = "/images/original-coffee-img-4.png",
                            IsAvailable = true,
                            Name = "Espresso Macchiato",
                            Price = 30.00m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7876)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7878),
                            Description = "A bold and intense coffee with deep flavors, perfect for those who enjoy a strong cup.",
                            ImagePath = "/images/original-coffee-img-5.png",
                            IsAvailable = true,
                            Name = "Robusta",
                            Price = 16.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7878)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7884),
                            Description = "Smooth and aromatic coffee, known for its balanced taste and delightful fragrance.",
                            ImagePath = "/images/original-coffee-img-6.png",
                            IsAvailable = true,
                            Name = "Arabica Coffee",
                            Price = 20.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7884)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7886),
                            Description = "Rich, full-bodied coffee with a deep roast, bringing out a smoky and chocolatey essence.",
                            ImagePath = "/images/original-coffee-img-7.png",
                            IsAvailable = true,
                            Name = "Colombia Dark Roast",
                            Price = 22.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7886)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7888),
                            Description = "A smooth, light-bodied coffee with a rich espresso base, perfect for those who enjoy a milder taste.",
                            ImagePath = "/images/original-coffee-img-8.png",
                            IsAvailable = true,
                            Name = "Americano Coffee",
                            Price = 32.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7889)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7890),
                            Description = "A rich blend of mocha and green tea, balancing sweetness and earthiness for a delightful taste.",
                            ImagePath = "/images/tea-bread-image-1.png",
                            IsAvailable = true,
                            Name = "Mocha Green Tea",
                            Price = 26.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7891)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7894),
                            Description = "Bold and aromatic with a hint of spice, often enjoyed with milk for a creamy finish.",
                            ImagePath = "/images/tea-bread-image-2.png",
                            IsAvailable = true,
                            Name = "Black Thai Tea",
                            Price = 20.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7894)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7896),
                            Description = "A sweet, comforting tea with a rich caramel flavor, offering a velvety and warm experience.",
                            ImagePath = "/images/tea-bread-image-3.png",
                            IsAvailable = true,
                            Name = "Cold Brew Tea",
                            Price = 18.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7897)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7899),
                            Description = "A crispy, golden loaf with a rich caramel flavor and a touch of herbs, perfect as a side or snack.",
                            ImagePath = "/images/tea-bread-image-4.png",
                            IsAvailable = true,
                            Name = "Caramel Tea",
                            Price = 12.00m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7899)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7901),
                            Description = "A classic French bread with a golden, crunchy crust and a soft, airy interior, ideal for sandwiches or serving with soup.",
                            ImagePath = "/images/tea-bread-image-5.png",
                            IsAvailable = true,
                            Name = "Garlic Bread",
                            Price = 15.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7902)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7905),
                            Description = "A sweet, spiced loaf filled with cinnamon swirls, offering a comforting aroma, perfect for breakfast or a treat.",
                            ImagePath = "/images/tea-bread-image-6.png",
                            IsAvailable = true,
                            Name = "Baguette",
                            Price = 16.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7905)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7907),
                            Description = "A perfect pairing of crispy, freshly made chips and rich, flavorful dips that bring a burst of taste in every bite.",
                            ImagePath = "/images/tea-bread-image-7.png",
                            IsAvailable = true,
                            Name = "Cinnamon Bread",
                            Price = 22.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7908)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7910),
                            Description = "A hearty, wholesome bread made from whole wheat flour, rich in fiber and nutrients for a healthy option.",
                            ImagePath = "/images/tea-bread-image-8.png",
                            IsAvailable = true,
                            Name = "Whole Wheat Bread",
                            Price = 28.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7910)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7912),
                            Description = "A perfect pairing of crispy, freshly made chips and rich, flavorful dips.",
                            ImagePath = "/images/dessert-image-3.png",
                            IsAvailable = true,
                            Name = "Almond Croissant",
                            Price = 22.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7912)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7915),
                            Description = "A light, flaky pastry topped with fresh mixed berries.",
                            ImagePath = "/images/dessert-image-2.png",
                            IsAvailable = true,
                            Name = "Berry Danish",
                            Price = 20.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7915)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7917),
                            Description = "A classic French pastry filled with creamy custard and chocolate.",
                            ImagePath = "/images/dessert-image-3.png",
                            IsAvailable = true,
                            Name = "Chocolate Eclair",
                            Price = 24.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7918)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7969),
                            Description = "A warm, soft bun swirled with cinnamon and sugar.",
                            ImagePath = "/images/dessert-image-4.png",
                            IsAvailable = true,
                            Name = "Cinnamon Bun",
                            Price = 30.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7969)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7971),
                            Description = "Rich, fudgy brownies swirled with creamy caramel.",
                            ImagePath = "/images/dessert-image-5.png",
                            IsAvailable = true,
                            Name = "Caramel Brownie",
                            Price = 26.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7971)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7974),
                            Description = "Classic soft cookies loaded with gooey chocolate chips.",
                            ImagePath = "/images/dessert-image-6.png",
                            IsAvailable = true,
                            Name = "Choco Chip Cookies",
                            Price = 22.00m,
                            Size = "Small",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7974)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7976),
                            Description = "A tangy and creamy cheesecake with zesty lemon flavor.",
                            ImagePath = "/images/dessert-image-7.png",
                            IsAvailable = true,
                            Name = "Lemon Cheesecake",
                            Price = 32.00m,
                            Size = "Large",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7976)
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7978),
                            Description = "A crisp tart filled with sweet peach filling.",
                            ImagePath = "/images/dessert-image-8.png",
                            IsAvailable = true,
                            Name = "Peach Tart",
                            Price = 20.00m,
                            Size = "Medium",
                            UpdatedAt = new DateTime(2025, 3, 30, 13, 10, 27, 624, DateTimeKind.Utc).AddTicks(7978)
                        });
                });

            modelBuilder.Entity("CafeHub.Commons.Models.ProductTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ToppingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ToppingId");

                    b.ToTable("ProductToppings");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MonthYear")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OvertimeHours")
                        .HasColumnType("float");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalHoursWorked")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CafeHub.Commons.Models.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.WorkShiftDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttendanceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("HoursContributed")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("WorkShiftDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Admin", b =>
                {
                    b.HasBaseType("CafeHub.Commons.Models.User");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Customer", b =>
                {
                    b.HasBaseType("CafeHub.Commons.Models.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Staff", b =>
                {
                    b.HasBaseType("CafeHub.Commons.Models.User");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.CustomerDiscount", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Customer", "Customer")
                        .WithMany("CustomerDiscounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeHub.Commons.Models.Discount", "Discount")
                        .WithMany("CustomerDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Order", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("CafeHub.Commons.Models.Staff", "Staff")
                        .WithMany("OrdersProcessed")
                        .HasForeignKey("StaffId");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.OrderItem", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeHub.Commons.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Payment", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CafeHub.Commons.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Product", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.ProductTopping", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Product", "Product")
                        .WithMany("ProductToppings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeHub.Commons.Models.Topping", "Topping")
                        .WithMany("ProductToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Salary", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Staff", "Staff")
                        .WithMany("Salaries")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.WorkShiftDetail", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.Staff", "Staff")
                        .WithMany("WorkShiftDetails")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeHub.Commons.Models.WorkShift", "WorkShift")
                        .WithMany("WorkShiftDetails")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeHub.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeHub.Commons.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CafeHub.Commons.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Discount", b =>
                {
                    b.Navigation("CustomerDiscounts");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Product", b =>
                {
                    b.Navigation("ProductToppings");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Topping", b =>
                {
                    b.Navigation("ProductToppings");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.WorkShift", b =>
                {
                    b.Navigation("WorkShiftDetails");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Customer", b =>
                {
                    b.Navigation("CustomerDiscounts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CafeHub.Commons.Models.Staff", b =>
                {
                    b.Navigation("OrdersProcessed");

                    b.Navigation("Salaries");

                    b.Navigation("WorkShiftDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
